@import com.omegaup.libinteractive.idl.IDL
@import com.omegaup.libinteractive.idl.Interface
@import com.omegaup.libinteractive.target.C
@import com.omegaup.libinteractive.target.Options
@(c: C, options: Options, idl: IDL)
/* @c.message */
#define _XOPEN_SOURCE 600
#if !defined(_WIN32) && !defined(_GNU_SOURCE)
#define _GNU_SOURCE
#endif
#include <fcntl.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include "@(options.moduleName).h"

#if defined(__GNUC__)
#define __NOINLINE __attribute__((noinline))
#else
#define __NOINLINE
#endif

#if defined(_WIN32)
#if !defined(PRIuS)
#define PRIuS "Iu"
#endif
#else
@if(options.transact) {
#include <sched.h>
#include <sys/mman.h>

}
#if !defined(PRIuS)
#define PRIuS "zu"
#endif
// Windows requires this flag to open files in binary mode using the
// open syscall.
#define O_BINARY 0
#endif

#ifdef __cplusplus
extern "C" {
#endif

@if(options.transact) {
@c_transact_functions(options.verbose)

static struct interface @idl.interfaces.map(c.transactName).mkString(", ");
} else {
@c_stream_functions(options.verbose)

static struct __stream @idl.interfaces.flatMap(interface =>
		List(c.pipeName(interface, true), c.pipeName(interface, false))
).mkString(", ");
}

void __NOINLINE __libinteractive_init() {
@if(options.transact) {
@for(interface <- idl.interfaces) {
	__interface_init(&@c.transactName(interface), 1, "@interface.name",
		"@c.transactFilename(interface)", "@c.shmFilename(interface)", @interface.shmSize);
}
} else {
@for(interface <- idl.interfaces) {
	openstream(&@c.pipeName(interface, true), "@c.pipeFilename(interface, idl.main, true)", O_WRONLY);
	openstream(&@c.pipeName(interface, false), "@c.pipeFilename(interface, idl.main, false)", O_RDONLY);
}
}
}

#if defined(_WIN32)
// declared in windows.h
void mainCRTStartup();

void __entry() {
	__libinteractive_init();

	// Perform regular libc startup
	mainCRTStartup();
}
#endif // _WIN32

#ifdef __cplusplus
}
#endif

@for(interface <- idl.interfaces) {
@if(options.transact) {
@c_message_loop_transact(c, options, interface, idl.main, c.transactName(interface))
} else {
@c_message_loop(c, options, interface, idl.main,
		c.pipeName(interface, true), c.pipeName(interface, false))
}

@for(function <- interface.functions) {
@if(options.transact) {
@c_shim_transact(c, options, function, interface, idl.main, c.transactName(interface))
} else {
@c_shim(c, options, function, interface, idl.main,
	c.pipeName(interface, true), c.pipeName(interface, false))
}

}
}
